// Copyright 2023 Scape Agency BV

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.



// ============================================================================
// Utilities | Scheme
// ============================================================================

// Complementary Color Function
// ----------------------------------------------------------------------------
// A function to find the complementary color on the color wheel, useful for
// creating color schemes.



// Complementary Color
// Generates the complementary color for a given color.
// ----------------------------------------------------------------------------

@function hue_complementary($color_name) {
    $color: hue_color($color_name);

    @if type-of($color) != 'color' {
        @warn "The specified color `#{$color_name}` could not be found.";
        @return null;
    }

    @return adjust-hue($color, 180deg);
}



// Color Inversion Function
// Inverts a color for high-contrast themes or effects.
// ----------------------------------------------------------------------------

@function hue_invert($color_name) {
    $color: hue_color($color_name);

    @if type-of($color) != 'color' {
        @warn "The specified color `#{$color_name}` could not be found.";
        @return null;
    }

    @return invert($color);
}


// Color Rotation Function
// Rotates the hue of a color by a given degree, useful for creating color
// variations.
// ----------------------------------------------------------------------------

@function hue_rotate($color_name, $degrees: 15deg) {
    $color: hue_color($color_name);

    @if type-of($color) != 'color' {
        @warn "The specified color `#{$color_name}` could not be found.";
        @return null;
    }

    @return adjust-hue($color, $degrees);
}


// Monochromatic Color Scheme Generator
// Generates a list of monochromatic colors based on a base color.
// ----------------------------------------------------------------------------

@function hue_monochromatic_scheme($base_color_name, $variation: 5%, $amount: 4) {
    $base_color: hue_color($base_color_name);
    $color_scheme: ();

    @if type-of($base_color) != 'color' {
        @warn "The specified base color `#{$base_color_name}` could not be found.";
        @return null;
    }

    @for $i from 1 through $amount {
        $color_scheme: append($color_scheme, lighten($base_color, $variation * $i), comma);
    }

    @return $color_scheme;
}


// Color Scale Generator
// Creates a scale of colors ranging from light to dark based on a base color.
// ----------------------------------------------------------------------------

@function hue_color_scale($base_color_name, $steps: 5) {
    $base_color: hue_color($base_color_name);
    $scale: ();

    @if type-of($base_color) != 'color' {
        @warn "The specified base color `#{$base_color_name}` could not be found.";
        @return null;
    }

    @for $i from 1 through $steps {
        $scale: append($scale, lighten($base_color, 10% * $i), comma);
        $scale: append($scale, darken($base_color, 10% * $i), comma);
    }

    @return $scale;
}


// Hue Rotation Scale
// Generates a scale of hues by rotating the base color.

@function hue_rotation_scale($base_color_name, $steps: 5, $rotation_amount: 20deg) {
    $base_color: hue_color($base_color_name);
    $rotation_scale: ();

    @if type-of($base_color) != 'color' {
        @warn "The specified base color `#{$base_color_name}` could not be found.";
        @return null;
    }

    @for $i from 1 through $steps {
        $rotation_scale: append($rotation_scale, adjust-hue($base_color, $rotation_amount * $i), comma);
    }

    @return $rotation_scale;
}



// Opacity Scale Generator
// Generates a set of opacities for a given color.
// ----------------------------------------------------------------------------

@function hue_opacity_scale($color_name, $steps: 5, $max_opacity: 1) {
    $color: hue_color($color_name);
    $opacity_scale: ();

    @if type-of($color) != 'color' {
        @warn "The specified color `#{$color_name}` could not be found.";
        @return null;
    }

    @for $i from 1 through $steps {
        $opacity: $max_opacity - ($i - 1) * ($max_opacity / $steps);
        $opacity_scale: append($opacity_scale, rgba($color, $opacity), comma);
    }

    @return $opacity_scale;
}
